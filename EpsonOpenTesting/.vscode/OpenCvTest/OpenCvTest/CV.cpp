#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>

using namespace std;

// Structure to hold order information
struct OrderInfo {
    string companyName;
    string address;
    string phoneStore;
    string date;
    string orderTime;
    string guests;
    string orderType;
    string orderId;
    string paidStatus;
    string pickupTime;
    string customerName;
    string phoneNumber;
    vector<string> items;  // Vector to store all items ordered
    string subtotal;
    string tax;
    string total;
};

// Function to split the buffer into lines
vector<string> splitBufferIntoLines(const unsigned char* buffer, size_t size) {
    vector<string> lines;
    string currentLine;

    for (size_t i = 0; i < size; ++i) {
        if (buffer[i] == '\n' || buffer[i] == '\r') {
            if (!currentLine.empty()) {
                lines.push_back(currentLine);
                currentLine.clear();
            }
        }
        else {
            currentLine += static_cast<char>(buffer[i]);
        }
    }

    // Add the last line if there is one
    if (!currentLine.empty()) {
        lines.push_back(currentLine);
    }

    return lines;
}

void printLines(const vector<string>& lines) {
    cout << "Lines from Buffer:" << endl;
    for (size_t i = 0; i < lines.size(); ++i) {
        cout << i + 1 << ": " << lines[i] << endl;
    }
    cout << "---------------------" << endl;
}

// Function to extract information from specific lines
OrderInfo extractOrderFromLines(const vector<string>& lines) {
    OrderInfo order;

    // Direct line-based extraction
    order.companyName = lines[1] + lines[2]; // "Primanti Bros. Almost Famous Since 1933"
    order.address = lines[3] + lines[4];     // "1539 Washington Road Mt. Lebanon, PA 15228"
    order.phoneStore = lines[5];  // "(412) 942-9100"
    order.date = lines[7].substr(13); // "01/30/2023" (from "Server: Web 01/30/2023")
    order.orderTime = lines[8].substr(lines[3].find_last_of(" ") + 1); // "11:01 AM"
    order.guests = lines[9].substr(8);   // "1" (from "Guests: 1")
    order.orderType = lines[12];  // "990006 Order Type: Wing Nut"
    order.orderId = lines[13];    // "Online Order 0.00"
    order.paidStatus = lines[14]; // "15879378961350659 0.00"
    order.pickupTime = lines[17]; // "Pickup time 11:16 AM"
    order.customerName = lines[19].substr(13); // "PickUp-James P" (from "Customer Name PickUp-James P")
    order.phoneNumber = lines[21]; // "(855) 973-1040"

    // Items ordered
    order.items.push_back(lines[25] + " " + lines[26]); // "WN-10 pc Boneless Wings Buffalo Sauce"
    order.items.push_back(lines[75] + " " + lines[76]); //second item added

    //// Subtotal, tax, and total
    order.subtotal = lines[28].substr(26);  // "12.99"
    order.tax = lines[31].substr(15);        // "0.78"
    order.total = lines[34].substr(25);      // "13.90"

    return order;
}

// Function to extract the item from the second order
string extractSecondItemFromLines(const vector<string>& lines) {
    // Extract the second item's details (same positions as first order's items)
    return lines[46] + " " + lines[47]; // "WN-10pc Bone-In Wing Buffalo Sauce"
}

// Function to print order details
void printOrder(const OrderInfo& order) {
    cout << "Company Name: " << order.companyName << endl;
    cout << "Address: " << order.address << endl;
    cout << "Phone Number: " << order.phoneStore << endl;
    cout << "Date: " << order.date << endl;
    cout << "Order Time: " << order.orderTime << endl;
    cout << "Guests: " << order.guests << endl;
    cout << "Order Type: " << order.orderType << endl;
    cout << "Order ID: " << order.orderId << endl;
    cout << "Paid Status: " << order.paidStatus << endl;
    cout << "Pickup Time: " << order.pickupTime << endl;
    cout << "Customer Name: " << order.customerName << endl;
    cout << "Customer Phone: " << order.phoneNumber << endl;

    //// Print items ordered
    cout << "Items Ordered:" << endl;
    for (const string& item : order.items) {
        cout << " - " << item << endl;
    }

    //// Print totals
    cout << "Subtotal: " << order.subtotal << endl;
    cout << "Tax: " << order.tax << endl;
    cout << "Total: " << order.total << endl;


}

void writeOrderToBinary(const string& filePath, const OrderInfo& order) {
    ofstream outputFile(filePath, ios::binary);

    if (!outputFile) {
        cerr << "Error creating file: " << filePath << endl;
        return;
    }

    // Helper lambda to write strings with null terminators to handle variable-length fields
    auto writeString = [&](const string& str) {
        outputFile.write(str.c_str(), str.size());
        outputFile.write("\n", 1); // Add a newline between fields, adjust if needed
        };

    // Write order details back to the file
    writeString(order.companyName);
    writeString(order.address);
    writeString(order.phoneStore);
    writeString(order.date);
    writeString(order.orderTime);
    writeString(order.guests);
    writeString(order.orderType);
    writeString(order.orderId);
    writeString(order.paidStatus);
    writeString(order.pickupTime);
    writeString(order.customerName);
    writeString(order.phoneNumber);

    // Write all items ordered
    for (const string& item : order.items) {
        writeString(item);
    }

    // Write totals
    writeString(order.subtotal);
    writeString(order.tax);
    writeString(order.total);

    outputFile.close();
}

int main() {
    const char* filePath = "C://dump//pri130-1.bin";

    ifstream inputFile(filePath, ios::binary);
    if (!inputFile) {
        cerr << "Error opening file: " << filePath << endl;
        return 1;
    }

    // Read the file into a buffer
    inputFile.seekg(0, ios::end);
    size_t fileSize = inputFile.tellg();
    inputFile.seekg(0, ios::beg);

    unsigned char* buffer = new unsigned char[fileSize];
    inputFile.read(reinterpret_cast<char*>(buffer), fileSize);

    // Split the buffer into lines
    vector<string> lines = splitBufferIntoLines(buffer, fileSize);

    // Extract the first order's information
    OrderInfo firstOrder = extractOrderFromLines(lines);

    // Extract the second order's item and add it to the first order
    string secondItem = extractSecondItemFromLines(lines);
    if (!secondItem.empty()) {
        firstOrder.items.push_back(secondItem);
    }

    // Print the consolidated order information
    printOrder(firstOrder);

    // Write the order information back to a binary file
    const string outputFilePath = "C://dump//output_order.bin";
    writeOrderToBinary(outputFilePath, firstOrder);

    delete[] buffer;  // Clean up the allocated buffer
    inputFile.close();  // Close the file stream

    return 0;
}
